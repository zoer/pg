// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	. "github.com/zoer/pg"
	reflect "reflect"
)

// MockConnPool is a mock of ConnPool interface
type MockConnPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnPoolMockRecorder
}

// MockConnPoolMockRecorder is the mock recorder for MockConnPool
type MockConnPoolMockRecorder struct {
	mock *MockConnPool
}

// NewMockConnPool creates a new mock instance
func NewMockConnPool(ctrl *gomock.Controller) *MockConnPool {
	mock := &MockConnPool{ctrl: ctrl}
	mock.recorder = &MockConnPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnPool) EXPECT() *MockConnPoolMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConnPool) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnPoolMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnPool)(nil).Close))
}

// QueryRow mocks base method
func (m *MockConnPool) QueryRow(arg0 context.Context, arg1 string, arg2 ...interface{}) Row {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockConnPoolMockRecorder) QueryRow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockConnPool)(nil).QueryRow), varargs...)
}

// Query mocks base method
func (m *MockConnPool) Query(arg0 context.Context, arg1 string, arg2 ...interface{}) (Rows, Error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockConnPoolMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockConnPool)(nil).Query), varargs...)
}

// Exec mocks base method
func (m *MockConnPool) Exec(arg0 context.Context, arg1 string, arg2 ...interface{}) (CommandTag, Error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(CommandTag)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockConnPoolMockRecorder) Exec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockConnPool)(nil).Exec), varargs...)
}

// CopyFrom mocks base method
func (m *MockConnPool) CopyFrom(arg0, arg1 []string, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "CopyFrom", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom
func (mr *MockConnPoolMockRecorder) CopyFrom(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockConnPool)(nil).CopyFrom), arg0, arg1, arg2)
}

// MockCommandTag is a mock of CommandTag interface
type MockCommandTag struct {
	ctrl     *gomock.Controller
	recorder *MockCommandTagMockRecorder
}

// MockCommandTagMockRecorder is the mock recorder for MockCommandTag
type MockCommandTagMockRecorder struct {
	mock *MockCommandTag
}

// NewMockCommandTag creates a new mock instance
func NewMockCommandTag(ctrl *gomock.Controller) *MockCommandTag {
	mock := &MockCommandTag{ctrl: ctrl}
	mock.recorder = &MockCommandTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandTag) EXPECT() *MockCommandTagMockRecorder {
	return m.recorder
}

// RowsAffected mocks base method
func (m *MockCommandTag) RowsAffected() int64 {
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected
func (mr *MockCommandTagMockRecorder) RowsAffected() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockCommandTag)(nil).RowsAffected))
}

// MockRow is a mock of Row interface
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockRow) Scan(arg0 ...interface{}) Error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), arg0...)
}

// MockRows is a mock of Rows interface
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockRows) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method
func (m *MockRows) Scan(arg0 ...interface{}) Error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowsMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), arg0...)
}

// Close mocks base method
func (m *MockRows) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Err mocks base method
func (m *MockRows) Err() Error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(Error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// MockError is a mock of Error interface
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockError) EXPECT() *MockErrorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockError) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockErrorMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockError)(nil).Error))
}

// Message mocks base method
func (m *MockError) Message() string {
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message
func (mr *MockErrorMockRecorder) Message() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockError)(nil).Message))
}

// Hint mocks base method
func (m *MockError) Hint() string {
	ret := m.ctrl.Call(m, "Hint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hint indicates an expected call of Hint
func (mr *MockErrorMockRecorder) Hint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hint", reflect.TypeOf((*MockError)(nil).Hint))
}

// IsCode mocks base method
func (m *MockError) IsCode(arg0 string) bool {
	ret := m.ctrl.Call(m, "IsCode", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCode indicates an expected call of IsCode
func (mr *MockErrorMockRecorder) IsCode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCode", reflect.TypeOf((*MockError)(nil).IsCode), arg0)
}

// NoRows mocks base method
func (m *MockError) NoRows() bool {
	ret := m.ctrl.Call(m, "NoRows")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoRows indicates an expected call of NoRows
func (mr *MockErrorMockRecorder) NoRows() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRows", reflect.TypeOf((*MockError)(nil).NoRows))
}
